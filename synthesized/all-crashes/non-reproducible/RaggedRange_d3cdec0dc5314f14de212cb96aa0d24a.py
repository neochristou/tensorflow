# 2022-01-20 07:05:21.242515: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 AVX512F FMATo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.2022-01-20 07:05:21.244773: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.2022-01-20 07:05:21.245532: W tensorflow/core/framework/op_kernel.cc:1692] OP_REQUIRES failed at ragged_range_op.cc:89 : Resource exhausted: OOM when allocating tensor with shape[6148914691236517888] and type int64 on /job:localhost/replica:0/task:0/device:CPU:0 by allocator mklcpuTraceback (most recent call last):  File "/home/neo/mlfuzz/tensorflow/synthesized/all-crashes/all/RaggedRange_d3cdec0dc5314f14de212cb96aa0d24a.py", line 6, in <module>    tf.raw_ops.RaggedRange(starts=arg_0, limits=arg_1, deltas=arg_2)  File "/home/neo/anaconda3/envs/tf/lib/python3.9/site-packages/tensorflow/python/util/tf_export.py", line 404, in wrapper    return f(**kwargs)  File "/home/neo/anaconda3/envs/tf/lib/python3.9/site-packages/tensorflow/python/ops/gen_ragged_math_ops.py", line 73, in ragged_range    _ops.raise_from_not_ok_status(e, name)  File "/home/neo/anaconda3/envs/tf/lib/python3.9/site-packages/tensorflow/python/framework/ops.py", line 6941, in raise_from_not_ok_status    six.raise_from(core._status_to_exception(e.code, message), None)  File "<string>", line 3, in raise_fromtensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[6148914691236517888] and type int64 on /job:localhost/replica:0/task:0/device:CPU:0 by allocator mklcpu [Op:RaggedRange]

import tensorflow as tf

arg_0 = tf.constant(-8608480567731124087, shape=[], dtype=tf.int64)
arg_1 = tf.constant(0, shape=[5], dtype=tf.int64)
arg_2 = tf.constant(1, shape=[], dtype=tf.int64)
tf.raw_ops.RaggedRange(starts=arg_0, limits=arg_1, deltas=arg_2)