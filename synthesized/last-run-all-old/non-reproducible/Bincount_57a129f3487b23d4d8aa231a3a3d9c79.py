# 2022-01-28 15:26:16.630700: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX AVX2 AVX512F FMATo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.2022-01-28 15:26:16.632980: W tensorflow/core/framework/cpu_allocator_impl.cc:80] Allocation of 4294967296 exceeds 10% of free system memory.2022-01-28 15:26:16.633018: W tensorflow/core/framework/cpu_allocator_impl.cc:80] Allocation of 73014444032 exceeds 10% of free system memory.2022-01-28 15:26:16.633050: W tensorflow/core/framework/op_kernel.cc:1692] OP_REQUIRES failed at bincount_op.cc:228 : Resource exhausted: OOM when allocating tensor with shape[17,536870912] and type int64 on /job:localhost/replica:0/task:0/device:CPU:0 by allocator cpuTraceback (most recent call last):  File "/media/mlfuzz/tensorflow/synthesized/last-run-all/all/Bincount_57a129f3487b23d4d8aa231a3a3d9c79.py", line 6, in <module>    tf.raw_ops.Bincount(arr=arr, size=size, weights=weights)  File "/media/fuzzing-pytorch/anaconda3/lib/python3.8/site-packages/tensorflow/python/util/tf_export.py", line 404, in wrapper    return f(**kwargs)  File "/media/fuzzing-pytorch/anaconda3/lib/python3.8/site-packages/tensorflow/python/ops/gen_math_ops.py", line 1806, in bincount    _ops.raise_from_not_ok_status(e, name)  File "/media/fuzzing-pytorch/anaconda3/lib/python3.8/site-packages/tensorflow/python/framework/ops.py", line 6941, in raise_from_not_ok_status    six.raise_from(core._status_to_exception(e.code, message), None)  File "<string>", line 3, in raise_fromtensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[17,536870912] and type int64 on /job:localhost/replica:0/task:0/device:CPU:0 by allocator cpu [Op:Bincount]

import tensorflow as tf

arr = tf.constant(0, shape=[1], dtype=tf.int32)
size = tf.constant(536870912, shape=[], dtype=tf.int32)
weights = tf.constant([], shape=[0], dtype=tf.int64)
tf.raw_ops.Bincount(arr=arr, size=size, weights=weights)