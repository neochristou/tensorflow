tffuzzing::Fuzzer::log_backtrace(char*)
tffuzzing::Fuzzer::restore_last_mutation(long long, char*)
tffuzzing::Fuzzer::Fuzzer(char*, tensorflow::OpKernelContext*)
tensorflow::TensorListReserve::Compute(tensorflow::OpKernelContext*) [clone .part.1654]
/proc/self/cwd/tensorflow/core/kernels/list_kernels.cc:396
tensorflow::TensorListReserve::Compute(tensorflow::OpKernelContext*)
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::Process(tensorflow::SimplePropagatorState::TaggedNode, long long)
/proc/self/cwd/tensorflow/core/common_runtime/executor.cc:575
std::_Function_handler<void (std::function<void ()>), tensorflow::GraphRunner::Run(tensorflow::Graph*, tensorflow::FunctionLibraryRuntime*, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor> > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<tensorflow::Tensor, std::allocator<tensorflow::Tensor> >*)::{lambda(std::function<void ()>)#2}>::_M_invoke(std::_Any_data const&, std::function<void ()>&&)
/usr/include/c++/8/bits/std_function.h:256
void tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::RunTask<std::_Bind<void (tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::*(tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>*, tensorflow::SimplePropagatorState::TaggedNode, long long))(tensorflow::SimplePropagatorState::TaggedNode, long long)> >(std::_Bind<void (tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::*(tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>*, tensorflow::SimplePropagatorState::TaggedNode, long long))(tensorflow::SimplePropagatorState::TaggedNode, long long)>&&)
/usr/include/c++/8/bits/std_function.h:256
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::ScheduleReady(absl::lts_2020_02_25::InlinedVector<tensorflow::SimplePropagatorState::TaggedNode, 8ul, std::allocator<tensorflow::SimplePropagatorState::TaggedNode> >*, tensorflow::SimplePropagatorState::TaggedNodeReadyQueue*)
/proc/self/cwd/tensorflow/core/common_runtime/executor.cc:1192
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::NodeDone(tensorflow::Status const&, absl::lts_2020_02_25::InlinedVector<tensorflow::SimplePropagatorState::TaggedNode, 8ul, std::allocator<tensorflow::SimplePropagatorState::TaggedNode> >*, tensorflow::NodeExecStatsInterface*, tensorflow::SimplePropagatorState::TaggedNodeReadyQueue*)
/proc/self/cwd/tensorflow/core/common_runtime/executor.cc:1082
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::Process(tensorflow::SimplePropagatorState::TaggedNode, long long)
/proc/self/cwd/tensorflow/core/common_runtime/executor.cc:840
std::_Function_handler<void (std::function<void ()>), tensorflow::GraphRunner::Run(tensorflow::Graph*, tensorflow::FunctionLibraryRuntime*, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor> > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<tensorflow::Tensor, std::allocator<tensorflow::Tensor> >*)::{lambda(std::function<void ()>)#2}>::_M_invoke(std::_Any_data const&, std::function<void ()>&&)
/usr/include/c++/8/bits/std_function.h:256
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::SimplePropagatorState>::ScheduleReady(absl::lts_2020_02_25::InlinedVector<tensorflow::SimplePropagatorState::TaggedNode, 8ul, std::allocator<tensorflow::SimplePropagatorState::TaggedNode> >*, tensorflow::SimplePropagatorState::TaggedNodeReadyQueue*)
/usr/include/c++/8/bits/std_function.h:256
tensorflow::(anonymous namespace)::ExecutorImpl::RunAsync(tensorflow::Executor::Args const&, std::function<void (tensorflow::Status const&)>)
/usr/include/c++/8/bits/unique_ptr.h:149
tensorflow::GraphRunner::Run(tensorflow::Graph*, tensorflow::FunctionLibraryRuntime*, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tensorflow::Tensor> > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<tensorflow::Tensor, std::allocator<tensorflow::Tensor> >*)
tensorflow::ConstantFold(tensorflow::ConstantFoldingOptions const&, tensorflow::FunctionLibraryRuntime*, tensorflow::Env*, tensorflow::Device const*, tensorflow::Graph*, bool*)
tensorflow::GraphOptimizer::Optimize(tensorflow::FunctionLibraryRuntime*, tensorflow::Env*, tensorflow::Device const*, std::unique_ptr<tensorflow::Graph, std::default_delete<tensorflow::Graph> >*, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<tensorflow::PartialTensorShape, std::allocator<tensorflow::PartialTensorShape> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<tensorflow::PartialTensorShape, std::allocator<tensorflow::PartialTensorShape> > > > > const*, std::function<bool (tensorflow::Node const*)> const&, std::function<bool (tensorflow::Node const*)> const&, bool, bool, bool, bool)
tensorflow::FunctionLibraryRuntimeImpl::CreateItem(tensorflow::FunctionLibraryRuntimeImpl::Item**)
tensorflow::FunctionLibraryRuntimeImpl::GetOrCreateItem(unsigned long long, tensorflow::FunctionLibraryRuntimeImpl::Item**)
tensorflow::FunctionLibraryRuntimeImpl::Run(tensorflow::FunctionLibraryRuntime::Options const&, unsigned long long, absl::lts_2020_02_25::Span<tensorflow::Tensor const>, std::vector<tensorflow::Tensor, std::allocator<tensorflow::Tensor> >*, std::function<void (tensorflow::Status const&)>)
tensorflow::ProcessFunctionLibraryRuntime::RunMultiDevice(tensorflow::FunctionLibraryRuntime::Options const&, unsigned long long, std::vector<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape>, std::allocator<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape> > >*, std::vector<std::unique_ptr<tensorflow::ProcessFunctionLibraryRuntime::CleanUpItem, std::default_delete<tensorflow::ProcessFunctionLibraryRuntime::CleanUpItem> >, std::allocator<std::unique_ptr<tensorflow::ProcessFunctionLibraryRuntime::CleanUpItem, std::default_delete<tensorflow::ProcessFunctionLibraryRuntime::CleanUpItem> > > >*, std::function<void (tensorflow::Status const&)>, std::function<tensorflow::Status (tensorflow::ProcessFunctionLibraryRuntime::ComponentFunctionData const&, tensorflow::ProcessFunctionLibraryRuntime::InternalArgs*)>) const
tensorflow::ProcessFunctionLibraryRuntime::Run(tensorflow::FunctionLibraryRuntime::Options const&, unsigned long long, absl::lts_2020_02_25::Span<tensorflow::Tensor const>, std::vector<tensorflow::Tensor, std::allocator<tensorflow::Tensor> >*, std::function<void (tensorflow::Status const&)>) const
tensorflow::ProcessFunctionLibraryRuntime::Run(tensorflow::FunctionLibraryRuntime::Options const&, unsigned long long, tensorflow::FunctionArgsInterface const&, std::vector<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape>, std::allocator<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape> > >*, std::function<void (tensorflow::Status const&)>) const
tensorflow::KernelAndDeviceFunc::RunAsync(tensorflow::ScopedStepContainer*, tensorflow::EagerKernelArgs const&, std::vector<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape>, std::allocator<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape> > >*, tensorflow::CancellationManager*, absl::lts_2020_02_25::optional<tensorflow::EagerRemoteFunctionParams> const&, std::function<void (tensorflow::Status const&)>)
tensorflow::KernelAndDeviceFunc::Run(tensorflow::ScopedStepContainer*, tensorflow::EagerKernelArgs const&, std::vector<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape>, std::allocator<absl::lts_2020_02_25::variant<tensorflow::Tensor, tensorflow::TensorShape> > >*, tensorflow::CancellationManager*, absl::lts_2020_02_25::optional<tensorflow::EagerRemoteFunctionParams> const&)
tensorflow::EagerKernelExecute(tensorflow::EagerContext*, absl::lts_2020_02_25::InlinedVector<tensorflow::TensorHandle*, 4ul, std::allocator<tensorflow::TensorHandle*> > const&, absl::lts_2020_02_25::optional<tensorflow::EagerRemoteFunctionParams> const&, std::unique_ptr<tensorflow::KernelAndDevice, tensorflow::core::RefCountDeleter> const&, tensorflow::GraphCollector*, tensorflow::CancellationManager*, absl::lts_2020_02_25::Span<tensorflow::TensorHandle*>)
tensorflow::ExecuteNode::Run()
tensorflow::EagerExecutor::SyncExecute(tensorflow::EagerNode*)
tensorflow::(anonymous namespace)::EagerLocalExecute(tensorflow::EagerOperation*, tensorflow::TensorHandle**, int*)
/proc/self/cwd/tensorflow/core/common_runtime/eager/execute.cc:702
tensorflow::EagerExecute(tensorflow::EagerOperation*, tensorflow::TensorHandle**, int*)
tensorflow::EagerOperation::Execute(absl::lts_2020_02_25::Span<tensorflow::AbstractTensorHandle*>, int*)
TFE_Execute
TFE_Py_ExecuteCancelable(TFE_Context*, char const*, char const*, absl::lts_2020_02_25::InlinedVector<TFE_TensorHandle*, 4ul, std::allocator<TFE_TensorHandle*> >*, _object*, TFE_CancellationManager*, absl::lts_2020_02_25::InlinedVector<TFE_TensorHandle*, 2ul, std::allocator<TFE_TensorHandle*> >*, TF_Status*)
tensorflow::TFE_Py_ExecuteCancelable_wrapper(pybind11::handle const&, char const*, char const*, pybind11::handle const&, pybind11::handle const&, TFE_CancellationManager*, pybind11::handle const&)
/proc/self/cwd/external/com_google_absl/absl/container/internal/inlined_vector.h:321
pybind11::cpp_function::initialize<pybind11_init__pywrap_tfe(pybind11::module&)::{lambda(pybind11::handle const&, char const*, char const*, pybind11::handle const&, pybind11::handle const&, pybind11::handle const&)#41}, pybind11::object, pybind11::handle const&, char const*, char const*, pybind11::handle const&, pybind11::handle const&, pybind11::handle const&, pybind11::name, pybind11::scope, pybind11::sibling>(pybind11_init__pywrap_tfe(pybind11::module&)::{lambda(pybind11::handle const&, char const*, char const*, pybind11::handle const&, pybind11::handle const&, pybind11::handle const&)#41}&&, pybind11::object (*)(pybind11::handle const&, char const*, char const*, pybind11::handle const&, pybind11::handle const&, pybind11::handle const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&)::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call)
/proc/self/cwd/bazel-out/k8-opt/bin/external/pybind11/_virtual_includes/pybind11/pybind11/pytypes.h:190
pybind11::cpp_function::dispatcher(_object*, _object*, _object*)
/proc/self/cwd/bazel-out/k8-opt/bin/external/pybind11/_virtual_includes/pybind11/pybind11/pybind11.h:624
PyCFunction_Call
_PyObject_MakeTpCall
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyEval_EvalCodeWithName
_PyEval_EvalCodeWithName
_PyObject_FastCallDict
_PyObject_Call_Prepend
_PyObject_MakeTpCall
_PyEval_EvalFrameDefault
_PyFunction_Vectorcall
PyVectorcall_Call
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
PyVectorcall_Call
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyObject_FastCallDict
_PyObject_Call_Prepend
_PyObject_MakeTpCall
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
PyVectorcall_Call
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyObject_FastCallDict
_PyObject_Call_Prepend
_PyObject_MakeTpCall
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
PyVectorcall_Call
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyObject_FastCallDict
_PyObject_Call_Prepend
_PyObject_MakeTpCall
_PyEval_EvalFrameDefault
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyObject_FastCallDict
_PyObject_Call_Prepend
PyObject_Call
_PyEval_EvalFrameDefault
_PyFunction_Vectorcall
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyFunction_Vectorcall
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
_PyFunction_Vectorcall
_PyEval_EvalCodeWithName
==========================
tffuzzing::Fuzzer::log_backtrace(char*)
tffuzzing::Fuzzer::restore_last_mutation(long long, char*)
tffuzzing::Fuzzer::Fuzzer(char*, tensorflow::OpKernelContext*)
tensorflow::TensorListReserve::Compute(tensorflow::OpKernelContext*) [clone .part.1654]
/proc/self/cwd/tensorflow/core/kernels/list_kernels.cc:396
tensorflow::TensorListReserve::Compute(tensorflow::OpKernelContext*)
tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>::Process(tensorflow::PropagatorState::TaggedNode, long long)
/proc/self/cwd/tensorflow/core/common_runtime/executor.cc:575
std::_Function_handler<void (), tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>::RunTask<std::_Bind<void (tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>::*(tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>*, tensorflow::PropagatorState::TaggedNode, long long))(tensorflow::PropagatorState::TaggedNode, long long)> >(std::_Bind<void (tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>::*(tensorflow::(anonymous namespace)::ExecutorState<tensorflow::PropagatorState>*, tensorflow::PropagatorState::TaggedNode, long long))(tensorflow::PropagatorState::TaggedNode, long long)>&&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
/usr/include/c++/8/bits/std_function.h:299
Eigen::ThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int)
std::_Function_handler<void (), tensorflow::thread::EigenEnvironment::CreateThread(std::function<void ()>)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
tensorflow::(anonymous namespace)::PThread::ThreadFn(void*)
/proc/self/cwd/./tensorflow/core/platform/mutex.h:151
start_thread
/build/glibc-vjB4T1/glibc-2.28/nptl/pthread_create.c:487 (discriminator 6)
clone
==========================
